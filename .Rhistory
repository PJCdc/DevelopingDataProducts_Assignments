)
p <- plot_ly(economics,
type = "scatter",
x = ~date,
y = ~uempmed,
name = "unemployment",
marker = list(
color="#264E86"
)) %>%
add_trace(x = ~date, y = ~fitted((loess(uempmed ~ as.numeric(date)))),
mode = 'lines',
line = list(
color = "#5E88FC",
dash = "dashed"
)
) %>%
# layout(p,
#   title = list("Unemployment"),
#   xaxis = list(
#     title = "Time",
#     showgrid = F),
#   yaxis = list(
#     title = "uidx")
#   )
layout(p,
list(title = "Unemployment",
xaxis = list(
title = "Time",
showgrid = F),
yaxis = list(
title = "uidx"))
p <- plot_ly(economics,
type = "scatter",
x = ~date,
y = ~uempmed,
name = "unemployment",
marker = list(
color="#264E86"
)) %>%
add_trace(x = ~date, y = ~fitted((loess(uempmed ~ as.numeric(date)))),
mode = 'lines',
line = list(
color = "#5E88FC",
dash = "dashed"
)
) %>%
# layout(p,
#   title = list("Unemployment"),
#   xaxis = list(
#     title = "Time",
#     showgrid = F),
#   yaxis = list(
#     title = "uidx")
#   )
layout(p,
list(title = "Unemployment",
xaxis = list(
title = "Time",
showgrid = F),
yaxis = list(
title = "uidx"))
)
library(plotly)
library(RColorBrewer)
year <- c(1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006)
amt <- c(11, 16, 21, 27, 33, 37, 43, 54, 68, 94, 128, 170, 213, 258, 307, 348, 385)
data <- data.frame(year, amt)
data$year <- factor(data$year, levels = data[["year"]])
a <- list(title = "Years",
showline = TRUE,
showgrid = FALSE,
showticklabels = TRUE,
linecolor = 'black',
linewidth = 1,
autotick = FALSE,
ticks = 'outside',
tickcolor = 'black',
tickwidth = 2,
ticklen = 5,
tickfont = list(family = 'Cambria',
size = 10,
color = 'rgb(82, 82, 82)'))
b <- list(title = "Years",
showline = TRUE,
showgrid = FALSE,
showticklabels = TRUE,
linecolor = 'black',
linewidth = 1,
autotick = FALSE,
ticks = 'outside',
tickcolor = 'black',
tickwidth = 2,
ticklen = 5,
tickfont = list(family = 'Cambria',
size = 10,
color = 'rgb(82, 82, 82)'))
plot_ly(data, x = ~year,
y = ~amt,
name= '',
type='scatter',
mode = 'lines+markers',
line = list(color = toRGB('#964f4d')),
marker = list(color = toRGB("#964f4d"))) %>%
layout(title = 'Pre-purchase financing poll',
xaxis = a,
yaxis = b)
library(quantmod)
msft <- getSymbols("MSFT", auto.assign = F)
dat <- as.data.frame(msft)
dat$date <- index(msft)
dat <- subset(dat, date >= "2016-01-01")
names(dat) <- sub("^MSFT\\.", "", names(dat))
plot_ly(dat, x = ~date, xend = ~date, color = ~Close > Open,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1)) %>%
add_segments(y = ~Open, yend = ~Close, size = I(3)) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
rangeslider()
?seq
seq(0, 1, length.out = 11)
library(quantmod)
library(lubridate)
library(plotly)
library(tidyr)
library(PerformanceAnalytics)
library(dplyr)
help(package = "quantmod")
help(package = "PerformanceAnalytics")
help("moving average")
??"moving average"
library(TTR)
help(package = "TTR")
data(ttrc)
ema.20 <-   EMA(ttrc[,"Close"], 20)
sma.20 <-   SMA(ttrc[,"Close"], 20)
ema.20[15:25,]
ema.20[15:25]
T3 <- function(x, n=10, v=1) DEMA(DEMA(DEMA(x,n,v),n,v),n,v)
t3 <- T3(ttrc[,"Close"])
t3
Sys.getenv()
?Sys.setenv
Sys.setenv(R_LIBS_USER = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
Sys.setenv(R_LIBS_USER = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
?.libPaths
Sys.setenv(R_LIBS_USER = "C:\Users\TCarroll\OneDrive - TMC\R\win-library\3.3")
getwd()
Sys.getenv()
?Sys.setenv
Sys.unsetenv(R_LIBS_USER)
Sys.unsetenv("R_LIBS_USER")
Sys.getenv()
Sys.setenv(R_LIBS_USER = "C:\Users\TCarroll\OneDrive - TMC\R\win-library\3.3")
Sys.setenv(R_LIBS_USER = ""C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3"")
Sys.setenv(R_LIBS_USER = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
?.libPaths
.Library
.libPaths(new = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.libPaths()
Sys.getenv()
.libPaths()
Sys.setenv(R_LIBS_SITE = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
.Library.site
Sys.getenv()
.Library.site
.Library.site("C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.Library.site(new = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.Library.site <- "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3"
.Library.site
.libPaths()
?Sys.setenv
R,home
R.home
R.home()
?Rconsole
startup
R_LIB
R_LIBS_USER
readRenviron()
?Sys.setenv
Sys.getenv()
help(package = ggplot2)
.libPaths()
Sys.getenv()
.libPaths()
help(package = "quantmod")
.libPaths()
Sys.getenv()
install.packages(c("abcrf", "ape", "car", "chron", "coda", "colourpicker", "data.table", "Hmisc", "phangorn", "phytools", "rms", "slam", "survey", "V8"), lib="C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
install.packages("replyr")
Sys.getenv()
?install.packages
.libPaths()
Sys.getenv()
?Startup
readRenviron()
?.libPaths
.libPaths()
help(package = "data.table")
library(parallel)
c1 <- detectCores()
c1
setwd("C:/Users/TCarroll/OneDrive - TMC/GitRepos/DevelopingDataProducts_Assignments/shinyProj_week4")
"C:\Users\TCarroll\OneDrive - TMC\GitRepos\DevelopingDataProducts_Assignments"
setwd("C:/Users/TCarroll/OneDrive - TMC/GitRepos/DevelopingDataProducts_Assignments")
getwd()
library(quantmod)
library(PerformanceAnalytics)
library(TTR)
library(lubridate)
library(plotly)
library(tidyr)
library(dplyr)
library(data.table)
library(dtplyr)
from="2008-01-01"
to="2016-11-22"
# symbols <- c("XLB", #SPDR Materials sector
#              "XLE", #SPDR Energy sector
#              "XLF", #SPDR Financial sector
#              "XLP", #SPDR Consumer staples sector
#              "XLI", #SPDR Industrial sector
#              "XLU", #SPDR Utilities sector
#              "XLV", #SPDR Healthcare sector
#              "XLK", #SPDR Tech sector
#              "XLY", #SPDR Consumer discretionary sector
#              "RWR", #SPDR Dow Jones REIT ETF
#
#              "EWJ", #iShares Japan
#              "EWG", #iShares Germany
#              "EWU", #iShares UK
#              "EWC", #iShares Canada
#              "EWY", #iShares South Korea
#              "EWA", #iShares Australia
#              "EWH", #iShares Hong Kong
#              "EWS", #iShares Singapore
#              "IYZ", #iShares U.S. Telecom
#              "EZU", #iShares MSCI EMU ETF
#              "IYR", #iShares U.S. Real Estate
#              "EWT", #iShares Taiwan
#              "EWZ", #iShares Brazil
#              "EFA", #iShares EAFE
#              "IGE", #iShares North American Natural Resources
#              "EPP", #iShares Pacific Ex Japan
#              "LQD", #iShares Investment Grade Corporate Bonds
#              "SHY", #iShares 1-3 year TBonds
#              "IEF", #iShares 3-7 year TBonds
#              "TLT" #iShares 20+ year Bonds
# )
# symbols <- c("AMZN", "^DJI", "^IXIC", "^GSPC")
stockID <- c("AMZN", "IBM", "MSFT", "AAPL")
stockName <- c("Amazon", "IBM", "Microsoft", "Apple")
stockType <- rep("stock", length(stockID))
stockSymbols <- data.frame(Ticker = stockID, Name = stockName, Type = stockType,
stringsAsFactors = FALSE)
stockSymbols$Display <- paste(stockSymbols$Ticker, " - ", stockSymbols$Name)
indexID <- c("^DJI", "^IXIC", "^GSPC")
indexName <- c("Dow Industrials", "Nasdaq Composite", "S&P 500")
indexType <- rep("index", length(indexID))
indexSymbols <- data.frame(Ticker = indexID, Name = indexName, Type = indexType,
stringsAsFactors = FALSE)
indexSymbols$Display <- paste(indexSymbols$Ticker, " - ", indexSymbols$Name)
symbols <- rbind(stockSymbols, indexSymbols)
getSymbols(symbols$Ticker, from=from, to=to, src="yahoo", adjust=TRUE)
# Create data.table for each stock
# AMZN
dtAMZNprices <- as.data.table(AMZN)
dtAMZNprices[,ID := "AMZN"]
oldColNames <- names(dtAMZNprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtAMZNprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtAMZNprices, colOrder)
dtAMZNprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(AMZN, period='daily')$daily.returns)
dtAMZNprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
#IBM
dtIBMprices <- as.data.table(IBM)
dtIBMprices[,ID := "IBM"]
oldColNames <- names(dtIBMprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtIBMprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtIBMprices, colOrder)
dtIBMprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(IBM, period='daily')$daily.returns)
dtIBMprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
# MSFT
dtMSFTprices <- as.data.table(MSFT)
dtMSFTprices[,ID := "MSFT"]
oldColNames <- names(dtMSFTprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtMSFTprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtMSFTprices, colOrder)
dtMSFTprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(MSFT, period='daily')$daily.returns)
dtMSFTprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
#AAPL
dtAAPLprices <- as.data.table(AAPL)
dtAAPLprices[,ID := "AAPL"]
oldColNames <- names(dtAAPLprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtAAPLprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtAAPLprices, colOrder)
dtAAPLprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(AAPL, period='daily')$daily.returns)
dtAAPLprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
# Create data.table for each index
# DJI
dtDJIprices <- as.data.table(DJI)
dtDJIprices[,ID := "DJI"]
oldColNames <- names(dtDJIprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtDJIprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtDJIprices, colOrder)
dtDJIprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(DJI, period='daily')$daily.returns)
dtDJIprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
# NAS
dtNASprices <- as.data.table(IXIC)
dtNASprices[,ID := "NAS"]
oldColNames <- names(dtNASprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtNASprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtNASprices, colOrder)
dtNASprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(IXIC, period='daily')$daily.returns)
dtNASprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
# SP
dtSPprices <- as.data.table(GSPC)
dtSPprices[,ID := "SP"]
oldColNames <- names(dtSPprices)
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(dtSPprices, oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(dtSPprices, colOrder)
dtSPprices[, `:=` (Volume = NULL,
Adjusted = NULL)]
dRet <- as.vector(periodReturn(GSPC, period='daily')$daily.returns)
dtSPprices[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
# length(names(dtAMZNprices))
temp <- rbind(dtAMZNprices, dtIBMprices)
temp <- rbind(temp, dtMSFTprices)
temp <- rbind(temp, dtAAPLprices)
temp <- rbind(temp, dtDJIprices)
temp <- rbind(temp, dtNASprices)
temp <- rbind(temp, dtSPprices)
dtPricesLong <- melt(temp, id.vars = c("Date", "ID"), measure.vars = 3:12)
pltDate <- as.data.frame(temp[ID == "AMZN" & year(Date) == "2016"])
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, colors = I("black") %>%
add_lines(y = ~sma50, colors = I("blue") %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
pltDate <- as.data.frame(temp[ID == "AMZN" & year(Date) == "2016"])
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, colors = I("black")) %>%
add_lines(y = ~sma50, colors = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")
pltDate <- as.data.frame(temp[ID == "AMZN" & year(Date) == "2016"])
temp <- rbind(dtAMZNprices, dtIBMprices)
temp <- rbind(temp, dtMSFTprices)
temp <- rbind(temp, dtAAPLprices)
temp <- rbind(temp, dtDJIprices)
temp <- rbind(temp, dtNASprices)
temp <- rbind(temp, dtSPprices)
dtPricesLong <- melt(temp, id.vars = c("Date", "ID"), measure.vars = 3:12)
pltDate <- as.data.frame(temp[ID == "AMZN" & year(Date) == "2016"])
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, colors = I("black")) %>%
add_lines(y = ~sma50, colors = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")
pltDate <- as.data.frame(temp[ID == "AMZN" & year(Date) == "2016"])
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, colors = I("black")) %>%
add_lines(y = ~sma50, colors = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("black")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("red")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("green")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
colors()
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("tomato")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("turquoise")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("maroon")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("turquoise")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(pltDate, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(6), color = ~Close > Open) %>%
add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~sma50, color = I("blue")) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
