add_markers(p, symbol = ~factor(cyl), color = I("black"))
)
library(quantmod)
msft <- getSymbols("MSFT", auto.assign = F)
dat <- as.data.frame(msft)
dat$date <- index(msft)
dat <- subset(dat, date >= "2016-01-01")
names(dat) <- sub("^MSFT\\.", "", names(dat))
plot_ly(dat, x = ~date, xend = ~date, color = ~Close > Open,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1)) %>%
add_segments(y = ~Open, yend = ~Close, size = I(3)) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
rangeslider()
help(package = installr )
library("installr")
version
Sys.info()
Rprofile.site
R_LIBS
help(package = baseenv())
help(package = base)
env.profile()
environment()
environment.variables
R.home()
r_libs
r_libs()
R_libs()
.libPaths
.libPaths()
.Library()
R_LIBS_USER
.Renviron
.Renviron()
R_HOME()
R_HOME
R.home()
Sys.getenv()
install.packages("data.table")
version
library(plotly)
library(dplyr)
p <- plot_ly(economics,
type = "scatter",
x = ~date,
y = ~uempmed,
name = "unemployment",
marker = list(
color="#264E86"
)) %>%
add_trace(x = ~date, y = ~fitted((loess(uempmed ~ as.numeric(date)))),
mode = 'lines',
line = list(
color = "#5E88FC",
dash = "dashed"
)
p <- plot_ly(economics,
type = "scatter",
x = ~date,
y = ~uempmed,
name = "unemployment",
marker = list(
color="#264E86"
)) %>%
add_trace(x = ~date, y = ~fitted((loess(uempmed ~ as.numeric(date)))),
mode = 'lines',
line = list(
color = "#5E88FC",
dash = "dashed"
)
) %>%
# layout(p,
#   title = list("Unemployment"),
#   xaxis = list(
#     title = "Time",
#     showgrid = F),
#   yaxis = list(
#     title = "uidx")
#   )
layout(p,
list(title = "Unemployment",
xaxis = list(
title = "Time",
showgrid = F),
yaxis = list(
title = "uidx"))
p <- plot_ly(economics,
type = "scatter",
x = ~date,
y = ~uempmed,
name = "unemployment",
marker = list(
color="#264E86"
)) %>%
add_trace(x = ~date, y = ~fitted((loess(uempmed ~ as.numeric(date)))),
mode = 'lines',
line = list(
color = "#5E88FC",
dash = "dashed"
)
) %>%
# layout(p,
#   title = list("Unemployment"),
#   xaxis = list(
#     title = "Time",
#     showgrid = F),
#   yaxis = list(
#     title = "uidx")
#   )
layout(p,
list(title = "Unemployment",
xaxis = list(
title = "Time",
showgrid = F),
yaxis = list(
title = "uidx"))
)
library(plotly)
library(RColorBrewer)
year <- c(1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006)
amt <- c(11, 16, 21, 27, 33, 37, 43, 54, 68, 94, 128, 170, 213, 258, 307, 348, 385)
data <- data.frame(year, amt)
data$year <- factor(data$year, levels = data[["year"]])
a <- list(title = "Years",
showline = TRUE,
showgrid = FALSE,
showticklabels = TRUE,
linecolor = 'black',
linewidth = 1,
autotick = FALSE,
ticks = 'outside',
tickcolor = 'black',
tickwidth = 2,
ticklen = 5,
tickfont = list(family = 'Cambria',
size = 10,
color = 'rgb(82, 82, 82)'))
b <- list(title = "Years",
showline = TRUE,
showgrid = FALSE,
showticklabels = TRUE,
linecolor = 'black',
linewidth = 1,
autotick = FALSE,
ticks = 'outside',
tickcolor = 'black',
tickwidth = 2,
ticklen = 5,
tickfont = list(family = 'Cambria',
size = 10,
color = 'rgb(82, 82, 82)'))
plot_ly(data, x = ~year,
y = ~amt,
name= '',
type='scatter',
mode = 'lines+markers',
line = list(color = toRGB('#964f4d')),
marker = list(color = toRGB("#964f4d"))) %>%
layout(title = 'Pre-purchase financing poll',
xaxis = a,
yaxis = b)
library(quantmod)
msft <- getSymbols("MSFT", auto.assign = F)
dat <- as.data.frame(msft)
dat$date <- index(msft)
dat <- subset(dat, date >= "2016-01-01")
names(dat) <- sub("^MSFT\\.", "", names(dat))
plot_ly(dat, x = ~date, xend = ~date, color = ~Close > Open,
colors = c("red", "forestgreen"), hoverinfo = "none") %>%
add_segments(y = ~Low, yend = ~High, size = I(1)) %>%
add_segments(y = ~Open, yend = ~Close, size = I(3)) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
rangeslider()
?seq
seq(0, 1, length.out = 11)
library(quantmod)
library(lubridate)
library(plotly)
library(tidyr)
library(PerformanceAnalytics)
library(dplyr)
help(package = "quantmod")
help(package = "PerformanceAnalytics")
help("moving average")
??"moving average"
library(TTR)
help(package = "TTR")
data(ttrc)
ema.20 <-   EMA(ttrc[,"Close"], 20)
sma.20 <-   SMA(ttrc[,"Close"], 20)
ema.20[15:25,]
ema.20[15:25]
T3 <- function(x, n=10, v=1) DEMA(DEMA(DEMA(x,n,v),n,v),n,v)
t3 <- T3(ttrc[,"Close"])
t3
Sys.getenv()
?Sys.setenv
Sys.setenv(R_LIBS_USER = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
Sys.setenv(R_LIBS_USER = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
?.libPaths
Sys.setenv(R_LIBS_USER = "C:\Users\TCarroll\OneDrive - TMC\R\win-library\3.3")
getwd()
Sys.getenv()
?Sys.setenv
Sys.unsetenv(R_LIBS_USER)
Sys.unsetenv("R_LIBS_USER")
Sys.getenv()
Sys.setenv(R_LIBS_USER = "C:\Users\TCarroll\OneDrive - TMC\R\win-library\3.3")
Sys.setenv(R_LIBS_USER = ""C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3"")
Sys.setenv(R_LIBS_USER = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
?.libPaths
.Library
.libPaths(new = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.libPaths()
Sys.getenv()
.libPaths()
Sys.setenv(R_LIBS_SITE = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
.Library.site
Sys.getenv()
.Library.site
.Library.site("C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.Library.site(new = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.Library.site <- "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3"
.Library.site
.libPaths()
?Sys.setenv
R,home
R.home
R.home()
?Rconsole
startup
R_LIB
R_LIBS_USER
readRenviron()
?Sys.setenv
Sys.getenv()
help(package = ggplot2)
.libPaths()
Sys.getenv()
.libPaths()
help(package = "quantmod")
.libPaths()
Sys.getenv()
install.packages(c("abcrf", "ape", "car", "chron", "coda", "colourpicker", "data.table", "Hmisc", "phangorn", "phytools", "rms", "slam", "survey", "V8"), lib="C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
install.packages("replyr")
Sys.getenv()
?install.packages
.libPaths()
Sys.getenv()
?Startup
readRenviron()
?.libPaths
.libPaths()
help(package = "data.table")
library(parallel)
c1 <- detectCores()
c1
setwd("C:/Users/TCarroll/OneDrive - TMC/GitRepos/DevelopingDataProducts_Assignments/shinyProj_week4")
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(shinyBS)
load(file = "plotlyStocks.RData")
# Define UI for application that draws a histogram
shinyUI(
fluidPage(
titlePanel("Stock Performance Review"),
fluidRow(
column(3,
selectInput("selectStock",
label = "Select Stock:",
choices = stockSymbols$Display,
# choices = c("AMZN", "GOOGL", "IBM"),
selected = "AMZN"),
selectInput("selectIndex",
label = "Select Reference Index:",
choices = indexSymbols$Display,
# choices = c("DJI", "NAS", "SP500"),
selected = "DJI")
),
column(3,
checkboxGroupInput("selectIndicators", "Select Indicators:",
choices = c("50-day Simple Moving Averge" = "sma50",
"20-day Simple Moving Average" = "sma20",
"50-day Weighted Moving Average" = "wma50",
"20-day Weighted Movinr Average" = "wma20",
"Average Close" = "avgClose")
)
),
column(4,
p("Indicator Descriptions"),
p("Average over a 50-day window"),
p("Average over a 20-day window"),
tagList(tags$ul(),
tags$li("50-SMA"),
tags$li("20-SMA"))
)
runApp()
View(stockSymbols)
lstYear <- c("2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016")
runApp()
lstYear <- c("2008", "2009", "2010", "2011", "2012", "2013", "2014", "2015", "2016")
runApp()
stockSymbols$Display
lstYear
runApp()
tags
help(package = shinyApp())
help(package = shiny)
runApp()
seq(2008, 2016)
lstYear <- seq(Year(from), Year(to))
library(lubridate)
from="2008-01-01"
to="2016-11-22"
lstYear <- seq(Year(from), Year(to))
?year
lstYear <- seq(year(from), year(to))
lstYear
# "C:\Users\TCarroll\OneDrive - TMC\GitRepos\DevelopingDataProducts_Assignments"
# setwd("C:/Users/TCarroll/OneDrive - TMC/GitRepos/DevelopingDataProducts_Assignments")
# getwd()
library(quantmod)
library(PerformanceAnalytics)
library(TTR)
library(lubridate)
library(plotly)
library(tidyr)
library(dplyr)
library(data.table)
library(dtplyr)
from="2008-01-01"
to="2016-11-22"
lstYear <- seq(year(from), year(to))
# symbols <- c("XLB", #SPDR Materials sector
#              "XLE", #SPDR Energy sector
#              "XLF", #SPDR Financial sector
#              "XLP", #SPDR Consumer staples sector
#              "XLI", #SPDR Industrial sector
#              "XLU", #SPDR Utilities sector
#              "XLV", #SPDR Healthcare sector
#              "XLK", #SPDR Tech sector
#              "XLY", #SPDR Consumer discretionary sector
#              "RWR", #SPDR Dow Jones REIT ETF
#
#              "EWJ", #iShares Japan
#              "EWG", #iShares Germany
#              "EWU", #iShares UK
#              "EWC", #iShares Canada
#              "EWY", #iShares South Korea
#              "EWA", #iShares Australia
#              "EWH", #iShares Hong Kong
#              "EWS", #iShares Singapore
#              "IYZ", #iShares U.S. Telecom
#              "EZU", #iShares MSCI EMU ETF
#              "IYR", #iShares U.S. Real Estate
#              "EWT", #iShares Taiwan
#              "EWZ", #iShares Brazil
#              "EFA", #iShares EAFE
#              "IGE", #iShares North American Natural Resources
#              "EPP", #iShares Pacific Ex Japan
#              "LQD", #iShares Investment Grade Corporate Bonds
#              "SHY", #iShares 1-3 year TBonds
#              "IEF", #iShares 3-7 year TBonds
#              "TLT" #iShares 20+ year Bonds
# )
# symbols <- c("AMZN", "^DJI", "^IXIC", "^GSPC")
stockID <- c("AMZN", "IBM", "MSFT", "AAPL")
stockName <- c("Amazon", "IBM", "Microsoft", "Apple")
stockType <- rep("stock", length(stockID))
stockSymbols <- data.frame(Ticker = stockID, Name = stockName, Type = stockType,
stringsAsFactors = FALSE)
stockSymbols$Display <- paste(stockSymbols$Ticker, " - ", stockSymbols$Name)
indexID <- c("^DJI", "^IXIC", "^GSPC")
indexName <- c("Dow Industrials", "Nasdaq Composite", "S&P 500")
indexType <- rep("index", length(indexID))
indexSymbols <- data.frame(Ticker = indexID, Name = indexName, Type = indexType,
stringsAsFactors = FALSE)
indexSymbols$Display <- paste(indexSymbols$Ticker, " - ", indexSymbols$Name)
symbols <- rbind(stockSymbols, indexSymbols)
getSymbols(symbols$Ticker, from=from, to=to, src="yahoo", adjust=TRUE)
# Create data.table for each stock and index
testTick <- gsub("\\^", "", symbols$Ticker)
testTick <- c("AMZN", "IBM")
tickerList <- character()
tickerDTlist <- list()
for(tick in testTick) {
# tickN <- sub("\\^", "", tick)
tickSymbol <- paste0("dt", tick, "prices")
tickerList <- c(tickerList,tickSymbol)
assign(tickSymbol, as.data.table(eval(as.name(tick))))
eval(as.name(tickSymbol))[,ID := tick]
oldColNames <- names(eval(as.name(tickSymbol)))
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(eval(as.name(tickSymbol)), oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(eval(as.name(tickSymbol)), colOrder)
eval(as.name(tickSymbol))[, `:=` (Volume = NULL,
Adjusted = NULL)]
}
lstPriceData <- lapply(tickerList, function(x) eval(as.name(x)))
dtPriceData <- rbindlist(lstPriceData)
dtPriceData[,Year := year(Date)]
tempYear <- "2010"
pickYear <- as.IDate(tempYear, format = "%Y")
pickID <- "AMZN"
pickMAtype <- "ema"
slowMA <- paste0(pickMAtype, "20")
fastMA <- paste0(pickMAtype, "50")
pltTitle <- filter(stockSymbols, Ticker == pickID)
pltTitle <- paste0(pltTitle$Display, " Price Chart for ", tempYear)
dtSelect <- data.table(Year = year(pickYear), ID = pickID)
dtPlotSelection <- dtPriceData[dtSelect, on = c("Year", "ID")]
tempID <- dtPlotSelection[,unique(ID)]
tempClose <- as.xts(dtPlotSelection[,.(Date,Close)])
dRet <- as.vector(periodReturn(tempClose, period='daily')$daily.returns)
dtPlotSelection[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
dtPlotSelection[, hText := paste0("Open: ", sprintf("%.2f",Open)," / ",
"High: ", sprintf("%.2f",High), "<br>",
"Low: ", sprintf("%.2f",Low), " / ",
"Close: ",sprintf("%.2f",Close), "<br>",
fastMA, ": ", sprintf("%.2f",eval(as.name(fastMA))), " / ",
slowMA, ": ", sprintf("%.2f",eval(as.name(slowMA))))]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange"), name = "Fast MA - 20 bars") %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
pChart <- plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange"), name = "Fast MA - 20 bars") %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
pChart
save(lstYear,
stockSymbols,
indexSymbols,
symbols,
dCLoseSymbols,
dReturnsSymbols,
pChart,
file = "plotlyStocks.RData")
runApp()
help(package = shinyApp())
help(package = shiny)
runApp()
?renderPlotly
runApp()
pChart
plot(pChart)
runApp()
?renderPlotly
dtPriceData
dtPriceData[,unique(ID)]
lstYear
stockSymbols
indexSymbols
symbols
dCLoseSymbols
dReturnsSymbols
symbols
testTick <- gsub("\\^", "", symbols$Ticker)
testTick
testTick <- gsub("\\^", "", symbols$Ticker)
tickerList <- character()
tickerDTlist <- list()
for(tick in testTick) {
# tickN <- sub("\\^", "", tick)
tickSymbol <- paste0("dt", tick, "prices")
tickerList <- c(tickerList,tickSymbol)
assign(tickSymbol, as.data.table(eval(as.name(tick))))
eval(as.name(tickSymbol))[,ID := tick]
oldColNames <- names(eval(as.name(tickSymbol)))
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(eval(as.name(tickSymbol)), oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(eval(as.name(tickSymbol)), colOrder)
eval(as.name(tickSymbol))[, `:=` (Volume = NULL,
Adjusted = NULL)]
}
lstPriceData <- lapply(tickerList, function(x) eval(as.name(x)))
dtPriceData <- rbindlist(lstPriceData)
dtPriceData
dtPriceData[,unique(ID)]
dtPriceData[,Year := year(Date)]
dtPriceData
