.libPaths()
Sys.getenv()
.libPaths()
Sys.setenv(R_LIBS_SITE = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
Sys.getenv()
.libPaths()
.Library.site
Sys.getenv()
.Library.site
.Library.site("C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.Library.site(new = "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
.Library.site <- "C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3"
.Library.site
.libPaths()
?Sys.setenv
R,home
R.home
R.home()
?Rconsole
startup
R_LIB
R_LIBS_USER
readRenviron()
?Sys.setenv
Sys.getenv()
help(package = ggplot2)
.libPaths()
Sys.getenv()
.libPaths()
help(package = "quantmod")
.libPaths()
Sys.getenv()
install.packages(c("abcrf", "ape", "car", "chron", "coda", "colourpicker", "data.table", "Hmisc", "phangorn", "phytools", "rms", "slam", "survey", "V8"), lib="C:/Users/TCarroll/OneDrive - TMC/R/win-library/3.3")
install.packages("replyr")
Sys.getenv()
?install.packages
.libPaths()
Sys.getenv()
?Startup
readRenviron()
?.libPaths
.libPaths()
help(package = "data.table")
library(parallel)
c1 <- detectCores()
c1
setwd("C:/Users/TCarroll/OneDrive - TMC/GitRepos/DevelopingDataProducts_Assignments/shinyProj_week4")
# "C:\Users\TCarroll\OneDrive - TMC\GitRepos\DevelopingDataProducts_Assignments"
# setwd("C:/Users/TCarroll/OneDrive - TMC/GitRepos/DevelopingDataProducts_Assignments")
# getwd()
library(quantmod)
library(PerformanceAnalytics)
library(TTR)
library(lubridate)
library(plotly)
library(tidyr)
library(dplyr)
library(data.table)
library(dtplyr)
from="2008-01-01"
to="2016-11-22"
# symbols <- c("XLB", #SPDR Materials sector
#              "XLE", #SPDR Energy sector
#              "XLF", #SPDR Financial sector
#              "XLP", #SPDR Consumer staples sector
#              "XLI", #SPDR Industrial sector
#              "XLU", #SPDR Utilities sector
#              "XLV", #SPDR Healthcare sector
#              "XLK", #SPDR Tech sector
#              "XLY", #SPDR Consumer discretionary sector
#              "RWR", #SPDR Dow Jones REIT ETF
#
#              "EWJ", #iShares Japan
#              "EWG", #iShares Germany
#              "EWU", #iShares UK
#              "EWC", #iShares Canada
#              "EWY", #iShares South Korea
#              "EWA", #iShares Australia
#              "EWH", #iShares Hong Kong
#              "EWS", #iShares Singapore
#              "IYZ", #iShares U.S. Telecom
#              "EZU", #iShares MSCI EMU ETF
#              "IYR", #iShares U.S. Real Estate
#              "EWT", #iShares Taiwan
#              "EWZ", #iShares Brazil
#              "EFA", #iShares EAFE
#              "IGE", #iShares North American Natural Resources
#              "EPP", #iShares Pacific Ex Japan
#              "LQD", #iShares Investment Grade Corporate Bonds
#              "SHY", #iShares 1-3 year TBonds
#              "IEF", #iShares 3-7 year TBonds
#              "TLT" #iShares 20+ year Bonds
# )
# symbols <- c("AMZN", "^DJI", "^IXIC", "^GSPC")
stockID <- c("AMZN", "IBM", "MSFT", "AAPL")
stockName <- c("Amazon", "IBM", "Microsoft", "Apple")
stockType <- rep("stock", length(stockID))
stockSymbols <- data.frame(Ticker = stockID, Name = stockName, Type = stockType,
stringsAsFactors = FALSE)
stockSymbols$Display <- paste(stockSymbols$Ticker, " - ", stockSymbols$Name)
indexID <- c("^DJI", "^IXIC", "^GSPC")
indexName <- c("Dow Industrials", "Nasdaq Composite", "S&P 500")
indexType <- rep("index", length(indexID))
indexSymbols <- data.frame(Ticker = indexID, Name = indexName, Type = indexType,
stringsAsFactors = FALSE)
indexSymbols$Display <- paste(indexSymbols$Ticker, " - ", indexSymbols$Name)
symbols <- rbind(stockSymbols, indexSymbols)
getSymbols(symbols$Ticker, from=from, to=to, src="yahoo", adjust=TRUE)
# Create data.table for each stock and index
testTick <- gsub("\\^", "", symbols$Ticker)
testTick <- c("AMZN", "IBM")
tickerList <- character()
tickerDTlist <- list()
for(tick in testTick) {
# tickN <- sub("\\^", "", tick)
tickSymbol <- paste0("dt", tick, "prices")
tickerList <- c(tickerList,tickSymbol)
assign(tickSymbol, as.data.table(eval(as.name(tick))))
eval(as.name(tickSymbol))[,ID := tick]
oldColNames <- names(eval(as.name(tickSymbol)))
newColNames <- c("Date", "Open", "High", "Low", "Close", "Volume", "Adjusted", "ID")
setnames(eval(as.name(tickSymbol)), oldColNames, newColNames)
colOrder <- c("Date", "ID","Open", "High", "Low", "Close", "Volume", "Adjusted")
setcolorder(eval(as.name(tickSymbol)), colOrder)
eval(as.name(tickSymbol))[, `:=` (Volume = NULL,
Adjusted = NULL)]
}
lstPriceData <- lapply(tickerList, function(x) eval(as.name(x)))
dtPriceData <- rbindlist(lstPriceData)
dtPriceData[,Year := year(Date)]
# selection examples:
tempYear <- "2014"
pickYear <- as.IDate(tempYear, format = "%Y")
pickID <- "AMZN"
dtSelect <- data.table(Year = year(pickYear), ID = pickID)
dtPlotSelection <- dtPriceData[dtSelect, on = c("Year", "ID")]
# Compute moving averages, returns
tempID <- dtPlotSelection[,unique(ID)]
tempClose <- as.xts(dtPlotSelection[,.(Date,Close)])
dRet <- as.vector(periodReturn(tempClose, period='daily')$daily.returns)
dtPlotSelection[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
pickMAtype <- "sma"
slowMA <- paste0(pickMAtype, "20")
slowMA
fastMA <- paste0(pickMAtype, "50")
tempYear <- "2014"
pickYear <- as.IDate(tempYear, format = "%Y")
pickID <- "AMZN"
pickMAtype <- "sma"
slowMA <- paste0(pickMAtype, "20")
fastMA <- paste0(pickMAtype, "50")
dtSelect <- data.table(Year = year(pickYear), ID = pickID)
dtPlotSelection <- dtPriceData[dtSelect, on = c("Year", "ID")]
tempID <- dtPlotSelection[,unique(ID)]
tempClose <- as.xts(dtPlotSelection[,.(Date,Close)])
dRet <- as.vector(periodReturn(tempClose, period='daily')$daily.returns)
dtPlotSelection[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
dtPlotSelection[, hText := paste0("Open: ", Open,"<br> ", "Close: ", Close)]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE)
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
style(hoverinfo = text, text = ~hText, traces = 1)
dtPlotSelection[, hText := paste0("Open: ", Open,"<br> ", "Close: ", Close)]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
style(hoverinfo = text, text = ~hText, traces = 1)
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
# style(hoverinfo = text, text = ~hText, traces = 1)
# dtSelect <- data.table(ID = c("AMZN", "IBM"), variable = "Close")
#
# dtPricesLong[year(Date) == "2008" & ID == "AMZN" & variable == "Close",]
# dtPricesLong[month(Date) == "1" & ID == "AMZN" & variable == "dailyRet",]
#
# dtPricesLong[dtSelect, on = c("ID", "variable")]
# dtPricesLong[dtSelect, on = c("ID")]
dtPricesLong <- melt(temp, id.vars = c("Date", "ID"), measure.vars = 3:12)
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
# style(hoverinfo = text, text = ~hText, traces = 1)
# dtSelect <- data.table(ID = c("AMZN", "IBM"), variable = "Close")
#
# dtPricesLong[year(Date) == "2008" & ID == "AMZN" & variable == "Close",]
# dtPricesLong[month(Date) == "1" & ID == "AMZN" & variable == "dailyRet",]
#
# dtPricesLong[dtSelect, on = c("ID", "variable")]
# dtPricesLong[dtSelect, on = c("ID")]
dtPricesLong <- melt(temp, id.vars = c("Date", "ID"), measure.vars = 3:12)
dtPlotSelection[, hText := paste0("Open: ", Open,"<br> ", "Close: ", Close)]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price")) %>%
# style(hoverinfo = text, text = ~hText, traces = 1)
# dtSelect <- data.table(ID = c("AMZN", "IBM"), variable = "Close")
#
# dtPricesLong[year(Date) == "2008" & ID == "AMZN" & variable == "Close",]
# dtPricesLong[month(Date) == "1" & ID == "AMZN" & variable == "dailyRet",]
#
# dtPricesLong[dtSelect, on = c("ID", "variable")]
# dtPricesLong[dtSelect, on = c("ID")]
dtPricesLong <- melt(temp, id.vars = c("Date", "ID"), measure.vars = 3:12)
dtPlotSelection[, hText := paste0("Open: ", Open,"<br> ", "Close: ", Close)]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
pickMAtype <- "ema"
slowMA <- paste0(pickMAtype, "20")
fastMA <- paste0(pickMAtype, "50")
dtSelect <- data.table(Year = year(pickYear), ID = pickID)
dtPlotSelection <- dtPriceData[dtSelect, on = c("Year", "ID")]
tempID <- dtPlotSelection[,unique(ID)]
tempClose <- as.xts(dtPlotSelection[,.(Date,Close)])
dRet <- as.vector(periodReturn(tempClose, period='daily')$daily.returns)
dtPlotSelection[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
dtPlotSelection[, hText := paste0("Open: ", Open,"<br> ", "Close: ", Close)]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
dtPlotSelection[, hText := paste0("Open: ", Open," / ", "Close: ", Close)]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
dtPlotSelection[, hText := paste0("Open: ", Open," / ", "High: ", High, "<br>",
"Low: ", Low, " / ", "Close: ", " / ")]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'text+x' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x + text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
?format
library(formatR)
help(package = "formatR")
?formatC
?sprintf
sprintf("%f", pi)
sprintf("%.3f", pi)
sprintf("%5.1f", pi)
slowMA
dtPlotSelection[, hText := paste0("Open: ", sprintf("%.2f",Open)," / ",
"High: ", sprintf("%.2f",High), "<br>",
"Low: ", sprintf("%.2f",Low), " / ",
"Close: ",sprintf("%.2f",Close), "<br>",
fastMA, ": ", sprintf("%.2f",eval(as,name(fastMA))), " / ",
slowMA, ": ", sprintf("%.2f",eval(as.name(slowMA))))]
tempYear <- "2014"
pickYear <- as.IDate(tempYear, format = "%Y")
pickID <- "AMZN"
pickMAtype <- "ema"
slowMA <- paste0(pickMAtype, "20")
fastMA <- paste0(pickMAtype, "50")
dtSelect <- data.table(Year = year(pickYear), ID = pickID)
dtPlotSelection <- dtPriceData[dtSelect, on = c("Year", "ID")]
tempID <- dtPlotSelection[,unique(ID)]
tempClose <- as.xts(dtPlotSelection[,.(Date,Close)])
dRet <- as.vector(periodReturn(tempClose, period='daily')$daily.returns)
dtPlotSelection[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
dtPlotSelection[, hText := paste0("Open: ", sprintf("%.2f",Open)," / ",
"High: ", sprintf("%.2f",High), "<br>",
"Low: ", sprintf("%.2f",Low), " / ",
"Close: ",sprintf("%.2f",Close), "<br>",
fastMA, ": ", sprintf("%.2f",eval(as.name(fastMA))), " / ",
slowMA, ": ", sprintf("%.2f",eval(as.name(slowMA))))]
dtPlotSelection
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(showlegend = FALSE, yaxis = list(title = "Price"))
?layout
stockSymbols
pltTitle <- paste0(stockSymbols$Display, " Price Chart for ", tempYear)
pltTitle
stockSymbols
stockSymbols[Ticker == "AMZN"]
stockSymbols[stockSymbols$Ticker == "AMZN"]
stockSymbols[stockSymbols$Ticker == "AMZN",]
?dplyr
pltTitle <- filter(, Ticker == pickID)
pltTitle <- filter(stockSymbols, Ticker == pickID)
pltTitle
pltTitle <- paste0(pltTitle$Display, " Price Chart for ", tempYear)
pltTitle
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = FALSE, yaxis = list(title = "Price"))
pltTitle
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open,
name = "High / Low Wiskers") %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue")) %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange")) %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
# add_lines(y = ~sma20, color = I("orange")) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange"), name = "Fast MA - 20 bars") %>%
# add_lines(y = ~sma50, color = I("blue")) %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
tempYear <- "2010"
pickYear <- as.IDate(tempYear, format = "%Y")
pickID <- "AMZN"
pickMAtype <- "ema"
slowMA <- paste0(pickMAtype, "20")
fastMA <- paste0(pickMAtype, "50")
pltTitle <- filter(stockSymbols, Ticker == pickID)
pltTitle <- paste0(pltTitle$Display, " Price Chart for ", tempYear)
dtSelect <- data.table(Year = year(pickYear), ID = pickID)
dtPlotSelection <- dtPriceData[dtSelect, on = c("Year", "ID")]
tempID <- dtPlotSelection[,unique(ID)]
tempClose <- as.xts(dtPlotSelection[,.(Date,Close)])
dRet <- as.vector(periodReturn(tempClose, period='daily')$daily.returns)
dtPlotSelection[,`:=` (dailyRet = dRet,
cumRet = cumsum(dRet),
sma20 = SMA(Close,20),
sma50 = SMA(Close,50),
ema20 = EMA(Close,20),
ema50 = EMA(Close,50))]
dtPlotSelection[, hText := paste0("Open: ", sprintf("%.2f",Open)," / ",
"High: ", sprintf("%.2f",High), "<br>",
"Low: ", sprintf("%.2f",Low), " / ",
"Close: ",sprintf("%.2f",Close), "<br>",
fastMA, ": ", sprintf("%.2f",eval(as.name(fastMA))), " / ",
slowMA, ": ", sprintf("%.2f",eval(as.name(slowMA))))]
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange"), name = "Fast MA - 20 bars") %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange"), name = "Fast MA - 20 bars") %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
plot_ly(dtPlotSelection, x = ~Date, xend = ~Date,
colors = c("red", "forestgreen"), text = ~hText, hoverinfo = 'none') %>%
add_segments(y = ~Low, yend = ~High, size = I(1), color = ~Close > Open) %>%
add_segments(y = ~Open, yend = ~Close, size = I(4), color = ~Close > Open) %>%
add_lines(y = ~eval(as.name(fastMA)), color = I("orange"), name = "Fast MA - 20 bars") %>%
add_lines(y = ~eval(as.name(slowMA)), color = I("blue"), name = "Slow MA - 50 bars") %>%
add_lines(y = ~Close,  opacity = 0, hoverinfo = 'x+text' , showlegend = FALSE) %>%
layout(title = pltTitle, showlegend = TRUE, yaxis = list(title = "Price"))
